//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Trending.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRealTimeUnit")]
    public interface IRealTimeUnit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/initialize", ReplyAction="http://tempuri.org/IRealTimeUnit/initializeResponse")]
        bool initialize(string id, string publicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/initialize", ReplyAction="http://tempuri.org/IRealTimeUnit/initializeResponse")]
        System.Threading.Tasks.Task<bool> initializeAsync(string id, string publicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/writeValue", ReplyAction="http://tempuri.org/IRealTimeUnit/writeValueResponse")]
        bool writeValue(string id, int address, double value, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/writeValue", ReplyAction="http://tempuri.org/IRealTimeUnit/writeValueResponse")]
        System.Threading.Tasks.Task<bool> writeValueAsync(string id, int address, double value, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/deinitialize", ReplyAction="http://tempuri.org/IRealTimeUnit/deinitializeResponse")]
        void deinitialize(string id, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeUnit/deinitialize", ReplyAction="http://tempuri.org/IRealTimeUnit/deinitializeResponse")]
        System.Threading.Tasks.Task deinitializeAsync(string id, byte[] signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeUnitChannel : Trending.ServiceReference1.IRealTimeUnit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeUnitClient : System.ServiceModel.ClientBase<Trending.ServiceReference1.IRealTimeUnit>, Trending.ServiceReference1.IRealTimeUnit {
        
        public RealTimeUnitClient() {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeUnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool initialize(string id, string publicKey) {
            return base.Channel.initialize(id, publicKey);
        }
        
        public System.Threading.Tasks.Task<bool> initializeAsync(string id, string publicKey) {
            return base.Channel.initializeAsync(id, publicKey);
        }
        
        public bool writeValue(string id, int address, double value, byte[] signature) {
            return base.Channel.writeValue(id, address, value, signature);
        }
        
        public System.Threading.Tasks.Task<bool> writeValueAsync(string id, int address, double value, byte[] signature) {
            return base.Channel.writeValueAsync(id, address, value, signature);
        }
        
        public void deinitialize(string id, byte[] signature) {
            base.Channel.deinitialize(id, signature);
        }
        
        public System.Threading.Tasks.Task deinitializeAsync(string id, byte[] signature) {
            return base.Channel.deinitializeAsync(id, signature);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDisplay")]
    public interface IDisplay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDisplay/readDisplayValues", ReplyAction="http://tempuri.org/IDisplay/readDisplayValuesResponse")]
        string readDisplayValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDisplay/readDisplayValues", ReplyAction="http://tempuri.org/IDisplay/readDisplayValuesResponse")]
        System.Threading.Tasks.Task<string> readDisplayValuesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDisplayChannel : Trending.ServiceReference1.IDisplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DisplayClient : System.ServiceModel.ClientBase<Trending.ServiceReference1.IDisplay>, Trending.ServiceReference1.IDisplay {
        
        public DisplayClient() {
        }
        
        public DisplayClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DisplayClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DisplayClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DisplayClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string readDisplayValues() {
            return base.Channel.readDisplayValues();
        }
        
        public System.Threading.Tasks.Task<string> readDisplayValuesAsync() {
            return base.Channel.readDisplayValuesAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addNewSimulationDriverUnit", ReplyAction="http://tempuri.org/IDatabaseManager/addNewSimulationDriverUnitResponse")]
        bool addNewSimulationDriverUnit(string id, ScadaModels.functionType fType, int address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addNewSimulationDriverUnit", ReplyAction="http://tempuri.org/IDatabaseManager/addNewSimulationDriverUnitResponse")]
        System.Threading.Tasks.Task<bool> addNewSimulationDriverUnitAsync(string id, ScadaModels.functionType fType, int address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeSimulationDriverUnit", ReplyAction="http://tempuri.org/IDatabaseManager/removeSimulationDriverUnitResponse")]
        bool removeSimulationDriverUnit(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeSimulationDriverUnit", ReplyAction="http://tempuri.org/IDatabaseManager/removeSimulationDriverUnitResponse")]
        System.Threading.Tasks.Task<bool> removeSimulationDriverUnitAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DOTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AOTag))]
        bool addTag(ScadaModels.Tag t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        System.Threading.Tasks.Task<bool> addTagAsync(ScadaModels.Tag t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        bool removeTag(string tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        System.Threading.Tasks.Task<bool> removeTagAsync(string tagID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/changeTag", ReplyAction="http://tempuri.org/IDatabaseManager/changeTagResponse")]
        bool changeTag(string tagID, System.Collections.Generic.Dictionary<ScadaModels.TagAttribute, object> changes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/changeTag", ReplyAction="http://tempuri.org/IDatabaseManager/changeTagResponse")]
        System.Threading.Tasks.Task<bool> changeTagAsync(string tagID, System.Collections.Generic.Dictionary<ScadaModels.TagAttribute, object> changes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/getTags", ReplyAction="http://tempuri.org/IDatabaseManager/getTagsResponse")]
        System.Collections.Generic.Dictionary<string, ScadaModels.Tag> getTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/getTags", ReplyAction="http://tempuri.org/IDatabaseManager/getTagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.Tag>> getTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/getUnits", ReplyAction="http://tempuri.org/IDatabaseManager/getUnitsResponse")]
        System.Collections.Generic.Dictionary<string, ScadaModels.SimulationUnit> getUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/getUnits", ReplyAction="http://tempuri.org/IDatabaseManager/getUnitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.SimulationUnit>> getUnitsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : Trending.ServiceReference1.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<Trending.ServiceReference1.IDatabaseManager>, Trending.ServiceReference1.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool addNewSimulationDriverUnit(string id, ScadaModels.functionType fType, int address) {
            return base.Channel.addNewSimulationDriverUnit(id, fType, address);
        }
        
        public System.Threading.Tasks.Task<bool> addNewSimulationDriverUnitAsync(string id, ScadaModels.functionType fType, int address) {
            return base.Channel.addNewSimulationDriverUnitAsync(id, fType, address);
        }
        
        public bool removeSimulationDriverUnit(string id) {
            return base.Channel.removeSimulationDriverUnit(id);
        }
        
        public System.Threading.Tasks.Task<bool> removeSimulationDriverUnitAsync(string id) {
            return base.Channel.removeSimulationDriverUnitAsync(id);
        }
        
        public bool addTag(ScadaModels.Tag t) {
            return base.Channel.addTag(t);
        }
        
        public System.Threading.Tasks.Task<bool> addTagAsync(ScadaModels.Tag t) {
            return base.Channel.addTagAsync(t);
        }
        
        public bool removeTag(string tagID) {
            return base.Channel.removeTag(tagID);
        }
        
        public System.Threading.Tasks.Task<bool> removeTagAsync(string tagID) {
            return base.Channel.removeTagAsync(tagID);
        }
        
        public bool changeTag(string tagID, System.Collections.Generic.Dictionary<ScadaModels.TagAttribute, object> changes) {
            return base.Channel.changeTag(tagID, changes);
        }
        
        public System.Threading.Tasks.Task<bool> changeTagAsync(string tagID, System.Collections.Generic.Dictionary<ScadaModels.TagAttribute, object> changes) {
            return base.Channel.changeTagAsync(tagID, changes);
        }
        
        public System.Collections.Generic.Dictionary<string, ScadaModels.Tag> getTags() {
            return base.Channel.getTags();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.Tag>> getTagsAsync() {
            return base.Channel.getTagsAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, ScadaModels.SimulationUnit> getUnits() {
            return base.Channel.getUnits();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.SimulationUnit>> getUnitsAsync() {
            return base.Channel.getUnitsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAlarmer", CallbackContract=typeof(Trending.ServiceReference1.IAlarmerCallback))]
    public interface IAlarmer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmer/AlarmerInit", ReplyAction="http://tempuri.org/IAlarmer/AlarmerInitResponse")]
        void AlarmerInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmer/AlarmerInit", ReplyAction="http://tempuri.org/IAlarmer/AlarmerInitResponse")]
        System.Threading.Tasks.Task AlarmerInitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmer/OnAlarm")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DOTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AOTag))]
        void OnAlarm(ScadaModels.Tag t, double value, System.DateTime timeStamp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmerChannel : Trending.ServiceReference1.IAlarmer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmerClient : System.ServiceModel.DuplexClientBase<Trending.ServiceReference1.IAlarmer>, Trending.ServiceReference1.IAlarmer {
        
        public AlarmerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AlarmerInit() {
            base.Channel.AlarmerInit();
        }
        
        public System.Threading.Tasks.Task AlarmerInitAsync() {
            return base.Channel.AlarmerInitAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITrendingPublisher")]
    public interface ITrendingPublisher {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/sendOutputSignal", ReplyAction="http://tempuri.org/ITrendingPublisher/sendOutputSignalResponse")]
        bool sendOutputSignal(int address, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/sendOutputSignal", ReplyAction="http://tempuri.org/ITrendingPublisher/sendOutputSignalResponse")]
        System.Threading.Tasks.Task<bool> sendOutputSignalAsync(int address, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/sendManualInputSignal", ReplyAction="http://tempuri.org/ITrendingPublisher/sendManualInputSignalResponse")]
        bool sendManualInputSignal(int address, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/sendManualInputSignal", ReplyAction="http://tempuri.org/ITrendingPublisher/sendManualInputSignalResponse")]
        System.Threading.Tasks.Task<bool> sendManualInputSignalAsync(int address, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/getTagsDict", ReplyAction="http://tempuri.org/ITrendingPublisher/getTagsDictResponse")]
        System.Collections.Generic.Dictionary<string, ScadaModels.Tag> getTagsDict();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/getTagsDict", ReplyAction="http://tempuri.org/ITrendingPublisher/getTagsDictResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.Tag>> getTagsDictAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/getEntries", ReplyAction="http://tempuri.org/ITrendingPublisher/getEntriesResponse")]
        ScadaModels.DBEntry[] getEntries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/getEntries", ReplyAction="http://tempuri.org/ITrendingPublisher/getEntriesResponse")]
        System.Threading.Tasks.Task<ScadaModels.DBEntry[]> getEntriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/ScanHappened", ReplyAction="http://tempuri.org/ITrendingPublisher/ScanHappenedResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DOTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AOTag))]
        void ScanHappened(ScadaModels.Tag t, double value, System.DateTime timeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/ScanHappened", ReplyAction="http://tempuri.org/ITrendingPublisher/ScanHappenedResponse")]
        System.Threading.Tasks.Task ScanHappenedAsync(ScadaModels.Tag t, double value, System.DateTime timeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/DictChanged", ReplyAction="http://tempuri.org/ITrendingPublisher/DictChangedResponse")]
        void DictChanged(System.Collections.Generic.Dictionary<string, ScadaModels.Tag> tagsDict);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingPublisher/DictChanged", ReplyAction="http://tempuri.org/ITrendingPublisher/DictChangedResponse")]
        System.Threading.Tasks.Task DictChangedAsync(System.Collections.Generic.Dictionary<string, ScadaModels.Tag> tagsDict);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingPublisherChannel : Trending.ServiceReference1.ITrendingPublisher, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrendingPublisherClient : System.ServiceModel.ClientBase<Trending.ServiceReference1.ITrendingPublisher>, Trending.ServiceReference1.ITrendingPublisher {
        
        public TrendingPublisherClient() {
        }
        
        public TrendingPublisherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrendingPublisherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingPublisherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingPublisherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool sendOutputSignal(int address, double value) {
            return base.Channel.sendOutputSignal(address, value);
        }
        
        public System.Threading.Tasks.Task<bool> sendOutputSignalAsync(int address, double value) {
            return base.Channel.sendOutputSignalAsync(address, value);
        }
        
        public bool sendManualInputSignal(int address, double value) {
            return base.Channel.sendManualInputSignal(address, value);
        }
        
        public System.Threading.Tasks.Task<bool> sendManualInputSignalAsync(int address, double value) {
            return base.Channel.sendManualInputSignalAsync(address, value);
        }
        
        public System.Collections.Generic.Dictionary<string, ScadaModels.Tag> getTagsDict() {
            return base.Channel.getTagsDict();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, ScadaModels.Tag>> getTagsDictAsync() {
            return base.Channel.getTagsDictAsync();
        }
        
        public ScadaModels.DBEntry[] getEntries() {
            return base.Channel.getEntries();
        }
        
        public System.Threading.Tasks.Task<ScadaModels.DBEntry[]> getEntriesAsync() {
            return base.Channel.getEntriesAsync();
        }
        
        public void ScanHappened(ScadaModels.Tag t, double value, System.DateTime timeStamp) {
            base.Channel.ScanHappened(t, value, timeStamp);
        }
        
        public System.Threading.Tasks.Task ScanHappenedAsync(ScadaModels.Tag t, double value, System.DateTime timeStamp) {
            return base.Channel.ScanHappenedAsync(t, value, timeStamp);
        }
        
        public void DictChanged(System.Collections.Generic.Dictionary<string, ScadaModels.Tag> tagsDict) {
            base.Channel.DictChanged(tagsDict);
        }
        
        public System.Threading.Tasks.Task DictChangedAsync(System.Collections.Generic.Dictionary<string, ScadaModels.Tag> tagsDict) {
            return base.Channel.DictChangedAsync(tagsDict);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITrendingSubscriber", CallbackContract=typeof(Trending.ServiceReference1.ITrendingSubscriberCallback))]
    public interface ITrendingSubscriber {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingSubscriber/TrendingSubscriberInit", ReplyAction="http://tempuri.org/ITrendingSubscriber/TrendingSubscriberInitResponse")]
        void TrendingSubscriberInit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrendingSubscriber/TrendingSubscriberInit", ReplyAction="http://tempuri.org/ITrendingSubscriber/TrendingSubscriberInitResponse")]
        System.Threading.Tasks.Task TrendingSubscriberInitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingSubscriberCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrendingSubscriber/OnScan")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.DOTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AITag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ScadaModels.AOTag))]
        void OnScan(ScadaModels.Tag t, double value, System.DateTime timeStamp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrendingSubscriber/OnTagsDictChanged")]
        void OnTagsDictChanged(System.Collections.Generic.Dictionary<string, ScadaModels.Tag> tagsDict);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingSubscriberChannel : Trending.ServiceReference1.ITrendingSubscriber, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrendingSubscriberClient : System.ServiceModel.DuplexClientBase<Trending.ServiceReference1.ITrendingSubscriber>, Trending.ServiceReference1.ITrendingSubscriber {
        
        public TrendingSubscriberClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrendingSubscriberClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrendingSubscriberClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingSubscriberClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingSubscriberClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void TrendingSubscriberInit() {
            base.Channel.TrendingSubscriberInit();
        }
        
        public System.Threading.Tasks.Task TrendingSubscriberInitAsync() {
            return base.Channel.TrendingSubscriberInitAsync();
        }
    }
}
